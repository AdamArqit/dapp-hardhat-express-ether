/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ProductApi {
  export type ProductStruct = {
    id: BigNumberish;
    name: string;
    price: BigNumberish;
    quantity: BigNumberish;
  };

  export type ProductStructOutput = [
    id: bigint,
    name: string,
    price: bigint,
    quantity: bigint
  ] & { id: bigint; name: string; price: bigint; quantity: bigint };
}

export interface ProductApiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deleteProduct"
      | "getAllProducts"
      | "getProduct"
      | "productArray"
      | "products"
      | "removeMe"
      | "setProduct"
      | "updateProduct"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deleteProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeMe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setProduct",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProduct",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "deleteProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeMe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProduct",
    data: BytesLike
  ): Result;
}

export interface ProductApi extends BaseContract {
  connect(runner?: ContractRunner | null): ProductApi;
  waitForDeployment(): Promise<this>;

  interface: ProductApiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deleteProduct: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getAllProducts: TypedContractMethod<
    [],
    [ProductApi.ProductStructOutput[]],
    "view"
  >;

  getProduct: TypedContractMethod<
    [_id: BigNumberish],
    [[string, bigint, bigint]],
    "view"
  >;

  productArray: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        id: bigint;
        name: string;
        price: bigint;
        quantity: bigint;
      }
    ],
    "view"
  >;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        id: bigint;
        name: string;
        price: bigint;
        quantity: bigint;
      }
    ],
    "view"
  >;

  removeMe: TypedContractMethod<
    [],
    [
      [bigint, string, bigint, bigint] & {
        id: bigint;
        name: string;
        price: bigint;
        quantity: bigint;
      }
    ],
    "view"
  >;

  setProduct: TypedContractMethod<
    [
      _id: BigNumberish,
      _name: string,
      _price: BigNumberish,
      _quantity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateProduct: TypedContractMethod<
    [
      _id: BigNumberish,
      _name: string,
      _price: BigNumberish,
      _quantity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deleteProduct"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllProducts"
  ): TypedContractMethod<[], [ProductApi.ProductStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getProduct"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [[string, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "productArray"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        id: bigint;
        name: string;
        price: bigint;
        quantity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        id: bigint;
        name: string;
        price: bigint;
        quantity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeMe"
  ): TypedContractMethod<
    [],
    [
      [bigint, string, bigint, bigint] & {
        id: bigint;
        name: string;
        price: bigint;
        quantity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setProduct"
  ): TypedContractMethod<
    [
      _id: BigNumberish,
      _name: string,
      _price: BigNumberish,
      _quantity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProduct"
  ): TypedContractMethod<
    [
      _id: BigNumberish,
      _name: string,
      _price: BigNumberish,
      _quantity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
